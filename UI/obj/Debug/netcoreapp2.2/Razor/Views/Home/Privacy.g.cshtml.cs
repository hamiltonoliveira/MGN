#pragma checksum "C:\Desenvolvimento\MGN\UI\Views\Home\Privacy.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "df0d746e38d52171303efad5ca034ccff11b1212"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Privacy), @"mvc.1.0.view", @"/Views/Home/Privacy.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Privacy.cshtml", typeof(AspNetCore.Views_Home_Privacy))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Desenvolvimento\MGN\UI\Views\_ViewImports.cshtml"
using UI;

#line default
#line hidden
#line 2 "C:\Desenvolvimento\MGN\UI\Views\_ViewImports.cshtml"
using UI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"df0d746e38d52171303efad5ca034ccff11b1212", @"/Views/Home/Privacy.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"52d79ad08d11418ded2b13adb4a9b2619d15bb23", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Privacy : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(93, 3817, true);
            WriteLiteral(@"

<table class=""table table-responsive"">
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>


    <tr>
        <td>
            MGN - Informação do Sistema  - Hamilton Vale<br />
            Resolvi instalar e configurar o PWA - Click no icone no lado superior<br />
            a direita. O PWA armazena todas as views no chache.
            É possível instalar nos celulares soluções em asp.net core.
        </td>
    </tr>

    <tr>
        <td>
            Sistema foi baseado na arquitetura DDD em 4(quatro) Projetos:
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            <b>Projeto Applicationcore:</b>
        </td>
    </tr>

    <tr>
        <td>
            1.0 - Temos as Entidades e nelas usei o FluentValidation para a ajudar nas validações que agilizará
            no projeto 'UnitMGN' de teste. Foram criadas ""anêmicas"", Data Annotation: marcações que definem configurações e comportame");
            WriteLiteral(@"ntos para propriedades e classes.
            pois suas propriedades estão sendo criticadas
            em outra camada (Infra / Mapping).
        </td>
    </tr>
    <tr>
        <td>
            1.1 - Temos o uso do DAPPER para popular uma ViewModelDTO de duas Entidades.
        </td>
    </tr>
    <tr>
        <td>
            1.2 - Temos a Interface genérica com seus métodos.
        </td>
    </tr>
    <tr>
        <td>
            1.3 - Temos Services com os serviços para cada Entidade genericamente.
        </td>
    </tr>

    <tr>
        <td>
            1.4 - Temos o UnitOfWork - responsável em commitar e coordenar as mudanças dos dados.
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            <b>Projeto Infra:</b>
        </td>
    </tr>

    <tr>
        <td>
            2.0 - Temos o Data com os DbSet que representam as coleções das entidades especificadas no item 1.0
        </td>
    </tr");
            WriteLiteral(@">
    <tr>
        <td>
            2.1 - Temos a implementação da interface da UnitOfWork assincronamente.
        </td>
    </tr>
    <tr>
        <td>
            2.2 - Temos os mapeamentos das Entidades onde é definido o nome das tabelas e suas propriedades.
        </td>
    </tr>

    <tr>
        <td>
            2.3 - Temos os mapeamentos conforme item 2.2
        </td>
    </tr>

    <tr>
        <td>
            2.4 - Temos o <b>Migrations</b> - o banco foi gerado dinamicamente pelos comandos : add-migration ""bco""
            update-database - Já que temos no   projeto INFRA a pasta com os scripts de criação do banco e tabelas,
            basta apenas rodar via console gerenciador de pacotes a seguinte instrução: <b>update-database</b>
        </td>
    </tr>

    <tr>
        <td>
            2.5 -Temos o Repository, uma classe genérica implementação por uma interface genérica. Esse repositório
            será usando nos serviços em injeção de dependência.
        </");
            WriteLiteral(@"td>
    </tr>
    <tr>
        <td>
            <b>Projeto NUnitMGN:</b>
        </td>
    </tr>

    <tr>
        <td>
            3.0 - Foram criadas classes para testes unitários com o auxilio do FluentValidation, esse framework
            acelera muito os processos de testes porque as regras foram criadas dentro das Entidades.
        </td>
    </tr>

    <tr>
        <td>
            <b>Projeto UI:</b>
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            4.0 - Criado na arquitetura MVC, seus controller e foram injetado os servições/Entidades.
        </td>
    </tr>
</table>





<br />
<br />
<br />
<br />
<br />



");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
