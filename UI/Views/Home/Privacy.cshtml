@*@{
        ViewData["Title"] = "Privacy Policy";
    }
    <h1>@ViewData["Title"]</h1>*@

<table class="table table-responsive">
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>


    <tr>
        <td>
            MGN - Informação do Sistema  - Hamilton Vale<br />
            Resolvi instalar e configurar o PWA - Click no icone no lado superior<br />
            a direita. O PWA armazena todas as views no chache.
            É possível instalar nos celulares soluções em asp.net core.
        </td>
    </tr>

    <tr>
        <td>
            Sistema foi baseado na arquitetura DDD em 4(quatro) Projetos:
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            <b>Projeto Applicationcore:</b>
        </td>
    </tr>

    <tr>
        <td>
            1.0 - Temos as Entidades e nelas usei o FluentValidation para a ajudar nas validações que agilizará
            no projeto 'UnitMGN' de teste. Foram criadas "anêmicas", Data Annotation: marcações que definem configurações e comportamentos para propriedades e classes.
            pois suas propriedades estão sendo criticadas
            em outra camada (Infra / Mapping).
        </td>
    </tr>
    <tr>
        <td>
            1.1 - Temos o uso do DAPPER para popular uma ViewModelDTO de duas Entidades.
        </td>
    </tr>
    <tr>
        <td>
            1.2 - Temos a Interface genérica com seus métodos.
        </td>
    </tr>
    <tr>
        <td>
            1.3 - Temos Services com os serviços para cada Entidade genericamente.
        </td>
    </tr>

    <tr>
        <td>
            1.4 - Temos o UnitOfWork - responsável em commitar e coordenar as mudanças dos dados.
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            <b>Projeto Infra:</b>
        </td>
    </tr>

    <tr>
        <td>
            2.0 - Temos o Data com os DbSet que representam as coleções das entidades especificadas no item 1.0
        </td>
    </tr>
    <tr>
        <td>
            2.1 - Temos a implementação da interface da UnitOfWork assincronamente.
        </td>
    </tr>
    <tr>
        <td>
            2.2 - Temos os mapeamentos das Entidades onde é definido o nome das tabelas e suas propriedades.
        </td>
    </tr>

    <tr>
        <td>
            2.3 - Temos os mapeamentos conforme item 2.2
        </td>
    </tr>

    <tr>
        <td>
            2.4 - Temos o <b>Migrations</b> - o banco foi gerado dinamicamente pelos comandos : add-migration "bco"
            update-database - Já que temos no   projeto INFRA a pasta com os scripts de criação do banco e tabelas,
            basta apenas rodar via console gerenciador de pacotes a seguinte instrução: <b>update-database</b>
        </td>
    </tr>

    <tr>
        <td>
            2.5 -Temos o Repository, uma classe genérica implementação por uma interface genérica. Esse repositório
            será usando nos serviços em injeção de dependência.
        </td>
    </tr>
    <tr>
        <td>
            <b>Projeto NUnitMGN:</b>
        </td>
    </tr>

    <tr>
        <td>
            3.0 - Foram criadas classes para testes unitários com o auxilio do FluentValidation, esse framework
            acelera muito os processos de testes porque as regras foram criadas dentro das Entidades.
        </td>
    </tr>

    <tr>
        <td>
            <b>Projeto UI:</b>
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td>
            4.0 - Criado na arquitetura MVC, seus controller e foram injetado os servições/Entidades.
        </td>
    </tr>
</table>





<br />
<br />
<br />
<br />
<br />



